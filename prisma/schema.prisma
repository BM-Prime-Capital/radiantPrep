// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// Enums
enum UserRole {
  PARENT
  CHILD
}

enum SubjectName {
  ELA
  Math
}

enum GradeLevel {
  GRADE_1
  GRADE_2
  GRADE_3
  GRADE_4
  GRADE_5
  GRADE_6
  GRADE_7
  GRADE_8
}

enum PrismaQuestionType {
  MULTIPLE_CHOICE
  TEXT
  FILL_IN_THE_BLANK
  WRITING
  IMAGE_CHOICE
  DRAWING
  PATTERN
  MATCHING
  CLOCK
  COMPARISON
  GRAMMAR
  WORD_SORT
  FRACTION
}

// Models
model User {
  id            String          @id @default(cuid())
  email         String          @unique
  passwordHash  String // Store hashed passwords, not plaintext
  role          UserRole
  parentProfile ParentProfile?
  childProfile  ChildProfile?
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
}

model ParentProfile {
  id        String   @id @default(cuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  // Add other parent-specific fields if needed
}

model ChildProfile {
  id          String       @id @default(cuid())
  user        User         @relation(fields: [userId], references: [id])
  userId      String       @unique
  childName   String
  accessCode  String       @unique
  grade       Grade        @relation(fields: [gradeId], references: [id])
  gradeId     Int
  subject     Subject      @relation(fields: [subjectId], references: [id]) // Default or current subject
  subjectId   Int
  assessments Assessment[]
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
}

model Subject {
  id        Int            @id @default(autoincrement())
  name      SubjectName    @unique
  questions Question[]
  children  ChildProfile[] // If a child can be associated with a primary subject
  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt
}

model Grade {
  id        Int            @id @default(autoincrement())
  level     GradeLevel     @unique
  questions Question[]
  children  ChildProfile[] // If a child is associated with a grade
  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt
}

model Question {
  id                  String                  @id @default(cuid())
  questionText        String                  @db.Text // Explicitly Text for longer questions
  passage             String?                 @db.Text // Explicitly Text for passages
  imageURL            String?
  dataAihint          String?
  questionType        PrismaQuestionType      @map("type") // Field name in model is questionType, DB column "type"
  category            String?
  subject             Subject                 @relation(fields: [subjectId], references: [id])
  subjectId           Int
  grade               Grade                   @relation(fields: [gradeId], references: [id])
  gradeId             Int
  options             QuestionOption[]
  correctAnswers      QuestionCorrectAnswer[]
  assessmentAnswers   AssessmentAnswer[]
  createdAt           DateTime                @default(now())
  updatedAt           DateTime                @updatedAt
}

model QuestionOption {
  id          String             @id @default(cuid())
  optionText  String
  isCorrect   Boolean? // Can be null if correctness is handled in QuestionCorrectAnswer or for non-MCQ
  question    Question           @relation(fields: [questionId], references: [id])
  questionId  String
  assessments AssessmentAnswer[]
  createdAt   DateTime           @default(now())
  updatedAt   DateTime           @updatedAt
}

model QuestionCorrectAnswer {
  id             String   @id @default(cuid())
  question       Question @relation(fields: [questionId], references: [id])
  questionId     String
  answerValue    Json // Can store string or array of strings for fill-in-the-blanks, text answers
  explanation    String?  @db.Text
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
}

model Assessment {
  id             String             @id @default(cuid())
  child          ChildProfile       @relation(fields: [childId], references: [id])
  childId        String
  subjectName    SubjectName // Store the subject name at the time of assessment
  gradeLevel     GradeLevel  // Store the grade level at the time of assessment
  score          Int
  totalQuestions Int
  startedAt      DateTime           @default(now())
  completedAt    DateTime?
  answers        AssessmentAnswer[]
  createdAt      DateTime           @default(now())
  updatedAt      DateTime           @updatedAt
}

model AssessmentAnswer {
  id               String            @id @default(cuid())
  assessment       Assessment        @relation(fields: [assessmentId], references: [id])
  assessmentId     String
  question         Question          @relation(fields: [questionId], references: [id])
  questionId       String
  userAnswer       Json? // Flexible to store single string, array of strings (for fill-in-blanks), or option ID string
  selectedOption   QuestionOption?   @relation(fields: [selectedOptionId], references: [id]) // For MCQ
  selectedOptionId String?
  isCorrect        Boolean
  answeredAt       DateTime          @default(now())
}
