datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum UserRole {
  PARENT
  CHILD
}

enum SubjectName {
  ELA
  Math
}

enum GradeLevel {
  GRADE_1
  GRADE_2
  GRADE_3
  GRADE_4
  GRADE_5
  GRADE_6
  GRADE_7
  GRADE_8
}

// Correspond aux QuestionType dans src/lib/types.ts
enum PrismaQuestionType {
  MULTIPLE_CHOICE
  TEXT
  FILL_IN_THE_BLANK
  WRITING
  IMAGE_CHOICE
  DRAWING
  PATTERN
  MATCHING
  CLOCK
  COMPARISON
  GRAMMAR
  WORD_SORT
  FRACTION
}

model User {
  id        String   @id @default(cuid())
  email     String?  @unique // Email pour les parents, optionnel pour les enfants
  password  String?  // Mot de passe hashé pour les parents
  name      String
  role      UserRole
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Champs spécifiques aux enfants
  accessCode String?    @unique // Code d'accès pour l'enfant
  grade      Grade?     @relation(fields: [gradeId], references: [id])
  gradeId    String?
  subject    Subject?   @relation(fields: [subjectId], references: [id]) // Sujet par défaut ou actuel
  subjectId  String?
  parent     User?      @relation("ParentChildren", fields: [parentId], references: [id])
  parentId   String?
  children   User[]     @relation("ParentChildren") // Relation pour un parent ayant plusieurs enfants

  assessments Assessment[] // Évaluations passées par l'enfant

  @@index([parentId])
}

model Subject {
  id   String      @id @default(cuid())
  name SubjectName @unique

  questions Question[]
  users     User[] // Utilisateurs ayant ce sujet par défaut/actuel
  assessments Assessment[]
}

model Grade {
  id    String     @id @default(cuid())
  level GradeLevel @unique // e.g., GRADE_1, GRADE_2

  questions   Question[]
  users       User[] // Utilisateurs à ce niveau
  assessments Assessment[]
}

model Question {
  id          String             @id @default(cuid())
  text        String             @db.Text
  type        PrismaQuestionType
  passage     String?            @db.Text
  imageUrl    String?
  imageAiHint String?            // Pour la génération d'images si imageUrl est un placeholder
  category    String?            // e.g., "Reading Comprehension"
  createdAt   DateTime           @default(now())
  updatedAt   DateTime           @updatedAt

  subject   Subject @relation(fields: [subjectId], references: [id])
  subjectId String
  grade     Grade   @relation(fields: [gradeId], references: [id])
  gradeId   String

  options                QuestionOption[]        // Pour MULTIPLE_CHOICE, IMAGE_CHOICE
  correctAnswers         QuestionCorrectAnswer[] // Pour TEXT, FILL_IN_THE_BLANK, GRAMMAR
  assessmentAnswers      AssessmentAnswer[]      // Réponses données à cette question

  @@index([subjectId])
  @@index([gradeId])
}

// Pour les questions à choix multiples
model QuestionOption {
  id        String   @id @default(cuid())
  text      String
  isCorrect Boolean  @default(false)
  question  Question @relation(fields: [questionId], references: [id], onDelete: Cascade)
  questionId String

  @@index([questionId])
}

// Pour stocker les réponses correctes pour les types TEXT, FILL_IN_THE_BLANK, etc.
// answerValue peut être une chaîne JSON si plusieurs réponses sont possibles (ex: pour les blancs multiples)
model QuestionCorrectAnswer {
  id          String   @id @default(cuid())
  answerValue String   @db.Text // Peut stocker une chaîne simple ou un JSON array de chaînes
  question    Question @relation(fields: [questionId], references: [id], onDelete: Cascade)
  questionId  String

  @@index([questionId])
}

model Assessment {
  id             String   @id @default(cuid())
  score          Int
  totalQuestions Int
  percentage     Float
  feedbackMessage String? @db.Text
  startedAt      DateTime @default(now())
  completedAt    DateTime @updatedAt

  childUser   User    @relation(fields: [childUserId], references: [id])
  childUserId String
  subject     Subject @relation(fields: [subjectId], references: [id])
  subjectId   String
  grade       Grade   @relation(fields: [gradeId], references: [id])
  gradeId     String

  answers AssessmentAnswer[]

  @@index([childUserId])
  @@index([subjectId])
  @@index([gradeId])
}

model AssessmentAnswer {
  id         String   @id @default(cuid())
  userAnswer String   @db.Text // Peut stocker une chaîne simple ou un JSON array pour les réponses multiples (ex: fill-in-the-blank)
  isCorrect  Boolean

  assessment   Assessment @relation(fields: [assessmentId], references: [id], onDelete: Cascade)
  assessmentId String
  question     Question   @relation(fields: [questionId], references: [id])
  questionId   String

  @@index([assessmentId])
  @@index([questionId])
}
