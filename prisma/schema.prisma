datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id            String       @id @default(cuid())
  email         String?      @unique // Optional for child, required for parent
  passwordHash  String? // For parent accounts
  role          UserRole
  childName     String?
  accessCode    String?      @unique
  grade         GradeLevel?
  subject       SubjectName?
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  assessments   Assessment[]
  parentId      String?
  parent        User?        @relation("ParentChildren", fields: [parentId], references: [id])
  children      User[]       @relation("ParentChildren")

  @@index([accessCode])
}

model Subject {
  id        String      @id @default(cuid())
  name      SubjectName @unique
  questions Question[]
}

model Grade {
  id        String     @id @default(cuid())
  level     GradeLevel @unique
  questions Question[]
}

model Question {
  id                  String                  @id @default(cuid())
  questionText        String                  @db.Text
  questionType        PrismaQuestionType      @map("type")
  passage             String?                 @db.Text
  imageUrl            String?
  category            String?
  blanksJson          String? // JSON string for fill_in_the_blank placeholders
  columnsJson         String? // JSON string for matching/word_sort columns
  dataAihint          String? // Hint for AI image generation
  isDrawing           Boolean? // Placeholder for drawing interaction
  drawingQuestion     Boolean? // Placeholder for drawing interaction

  subjectId           String
  subject             Subject                 @relation(fields: [subjectId], references: [id])

  gradeId             String
  grade               Grade                   @relation(fields: [gradeId], references: [id])

  options             QuestionOption[]
  correctAnswers      QuestionCorrectAnswer[]
  assessmentAnswers AssessmentAnswer[]

  createdAt           DateTime                @default(now())
  updatedAt           DateTime                @updatedAt

  @@index([subjectId])
  @@index([gradeId])
}

model QuestionOption {
  id         String   @id @default(cuid())
  value      String
  questionId String
  question   Question @relation(fields: [questionId], references: [id], onDelete: Cascade)

  @@index([questionId])
}

// Stores correct answers. For multiple choice, there's one. For fill-in-the-blank with multiple blanks, answerValue could be a JSON array string.
// Or, multiple records for multiple accepted text answers.
model QuestionCorrectAnswer {
  id            String   @id @default(cuid())
  answerValue   String   @db.Text // Can be a single string or a JSON string array for multiple fill-ins
  questionId    String
  question      Question @relation(fields: [questionId], references: [id], onDelete: Cascade)
  isPrimary     Boolean  @default(true) // Useful if multiple correct answers are possible, to mark the "main" one

  @@index([questionId])
}

model Assessment {
  id              String             @id @default(cuid())
  userId          String
  user            User               @relation(fields: [userId], references: [id])
  subjectName     SubjectName
  gradeLevel      GradeLevel
  score           Int
  totalQuestions  Int
  takenAt         DateTime           @default(now())
  answers         AssessmentAnswer[]

  @@index([userId])
}

model AssessmentAnswer {
  id                String   @id @default(cuid())
  assessmentId      String
  assessment        Assessment @relation(fields: [assessmentId], references: [id], onDelete: Cascade)
  questionId        String
  question          Question @relation(fields: [questionId], references: [id])
  userAnswer        String   @db.Text // Could be a simple string or JSON string for multi-part answers
  isCorrect         Boolean
  submittedAt       DateTime @default(now())

  @@index([assessmentId])
  @@index([questionId])
}

enum UserRole {
  PARENT
  CHILD
}

enum SubjectName {
  ELA
  Math
}

enum GradeLevel {
  GRADE_1
  GRADE_2
  GRADE_3
  GRADE_4
  GRADE_5
  GRADE_6
  GRADE_7
  GRADE_8
}

enum PrismaQuestionType {
  MULTIPLE_CHOICE
  TEXT
  FILL_IN_THE_BLANK
  WRITING
  IMAGE_CHOICE
  DRAWING
  PATTERN
  MATCHING
  CLOCK
  COMPARISON
  GRAMMAR
  WORD_SORT
  FRACTION
}
